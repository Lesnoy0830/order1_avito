import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.types import BotCommand
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, time
import pytz

from handlers import router
from database import Database
from constants import BOT_TOKEN, REMINDER_INTERVAL_HOURS, USER_BLOCKED, UPDATE_HOUR, UPDATE_MINUTE, REMINDER_TIMES
from keyboards import get_back_keyboard

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

async def main():
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher()
    db = Database()
    scheduler = AsyncIOScheduler(timezone=pytz.timezone('Europe/Moscow'))
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    await db.init_db()
    logging.info("Database initialized")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤
    dp.include_router(router)
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –∏ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –¥–Ω—è —á–µ–ª–ª–µ–Ω–¥–∂–∞
    async def reset_daily_tasks():
        await db.reset_daily_completions()
        await db.increment_challenge_day()
        logging.info("Daily tasks reset and challenge day incremented at 00:00")
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    async def send_reminders():
        users = await db.get_users_without_today_completion()
        challenge_info = await db.get_challenge_info()
        logging.info(f"Sending reminders to {len(users)} users")
        
        blocked_users_count = 0
        current_time = datetime.now()
        
        for user in users:
            try:
                telegram_id, username, reminder_count, current_day = user
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
                should_block = False
                if reminder_count >= 1:
                    # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ –Ω–µ –ø–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
                    last_reminder = await db.get_last_reminder_time(telegram_id)
                    if last_reminder:
                        time_diff = (current_time - last_reminder).total_seconds() / 3600  # –≤ —á–∞—Å–∞—Ö
                        if time_diff >= REMINDER_INTERVAL_HOURS:
                            should_block = True
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
                await db.increment_reminder_count(telegram_id, current_time)
                current_count = await db.get_reminder_count(telegram_id)
                
                logging.info(f"User {telegram_id} has {current_count} reminders (was {reminder_count})")
                
                if should_block:  # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–µ–ª –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                    await db.update_user_status(telegram_id, USER_BLOCKED)
                    await bot.send_message(
                        telegram_id,
                        "‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."
                    )
                    blocked_users_count += 1
                    logging.info(f"User {telegram_id} blocked after {current_count} reminders with proper interval")
                else:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                    if challenge_info:
                        reminder_text = (
                            f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{current_count}!\n"
                            f"üèÜ –ß–µ–ª–ª–µ–Ω–¥–∂: {challenge_info['name']}\n"
                            f"üìÖ –î–µ–Ω—å: {current_day}/{challenge_info['total_days']}\n"
                            f"üí™ –°–µ–≥–æ–¥–Ω—è –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å: {current_day} {challenge_info['task']}\n\n"
                            f"–û—Ç–ø—Ä–∞–≤—å –∫—Ä—É–∂–æ—á–µ–∫ (–≤–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ), —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è!\n"
                            f"–û—Å—Ç–∞–ª–æ—Å—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {2 - current_count}"
                        )
                    else:
                        reminder_text = (
                            f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{current_count}! –ù–µ –∑–∞–±—É–¥—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂!\n"
                            f"–û—Ç–ø—Ä–∞–≤—å –∫—Ä—É–∂–æ—á–µ–∫ (–≤–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ), —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è!\n"
                            f"–û—Å—Ç–∞–ª–æ—Å—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {2 - current_count}"
                        )
                    
                    await bot.send_message(
                        telegram_id,
                        reminder_text,
                        reply_markup=get_back_keyboard()
                    )
                    logging.info(f"Reminder #{current_count} sent to user {telegram_id}")
                    
            except Exception as e:
                logging.error(f"Failed to send reminder to {user[0]}: {e}")
        
        if blocked_users_count > 0:
            logging.info(f"Blocked {blocked_users_count} users for not completing challenge")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±—Ä–æ—Å –≤ 00:00
    scheduler.add_job(reset_daily_tasks, 'cron', hour=UPDATE_HOUR, minute=UPDATE_MINUTE)
    
    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ 7:30 –∏ 15:00
    for reminder_time in REMINDER_TIMES:
        hour, minute = reminder_time
        scheduler.add_job(send_reminders, 'cron', hour=hour, minute=minute)
    
    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler.start()
    logging.info("Scheduler started")
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
    await bot.set_my_commands([
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand(command="admin", description="–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
    ])
    
    logging.info("Bot started")
    
    try:
        await dp.start_polling(bot)
    finally:
        scheduler.shutdown()
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())