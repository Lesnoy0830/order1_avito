from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database import Database
from constants import USER_ACTIVE, USER_BLOCKED, ADMIN_IDS, CHANNEL_ID
from keyboards import get_start_keyboard, get_admin_keyboard, get_back_keyboard, get_management_keyboard, get_cancel_keyboard, get_challenge_keyboard
from datetime import date, timedelta
import logging

router = Router()
db = Database()

class AdminStates(StatesGroup):
    waiting_for_challenge_name = State()
    waiting_for_challenge_task = State()
    waiting_for_challenge_days = State()
    waiting_for_block_user_id = State()
    waiting_for_activate_user_id = State()
    waiting_for_update_task = State()

# –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
@router.message(Command("start"))
async def cmd_start(message: Message):
    user = await db.get_user(message.from_user.id)
    
    if user:
        challenge_info = await db.get_challenge_info()
        user_day = await db.get_user_current_day(message.from_user.id)
        
        if challenge_info:
            if user_day == 0:
                challenge_text = (
                    f"üèÜ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–π —á–µ–ª–ª–µ–Ω–¥–∂: {challenge_info['name']}\n"
                    f"üìÖ –ù–∞—á–∞–ª–æ: {challenge_info['start_date']}\n"
                    f"üí™ –í—Å–µ–≥–æ –¥–Ω–µ–π: {challenge_info['total_days']}\n\n"
                    f"–ß–µ–ª–ª–µ–Ω–¥–∂ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª—Å—è! –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å: {challenge_info['start_date']}"
                )
            else:
                challenge_text = (
                    f"üèÜ –ê–∫—Ç–∏–≤–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂: {challenge_info['name']}\n"
                    f"üìÖ –î–µ–Ω—å: {user_day}/{challenge_info['total_days']}\n"
                    f"üí™ –ó–∞–¥–∞–Ω–∏–µ: {user_day} {challenge_info['task']}\n\n"
                    f"–û—Ç–ø—Ä–∞–≤–ª—è–π –∫—Ä—É–∂–æ—á–µ–∫ (–≤–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ), —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è!"
                )
        else:
            challenge_text = "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞."
        
        await message.answer(
            challenge_text,
            reply_markup=get_back_keyboard() if message.from_user.id in ADMIN_IDS else None
        )
    else:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –°–µ–π—á–∞—Å –∏–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ. –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ç–µ–±—è –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏?",
            reply_markup=get_start_keyboard()
        )

@router.message(F.text == "‚úÖ –î–∞, –∑–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω—è!")
async def agree_participation(message: Message):
    await db.add_user(message.from_user.id, message.from_user.username)
    challenge_info = await db.get_challenge_info()
    
    if challenge_info:
        user_day = await db.get_user_current_day(message.from_user.id)
        if user_day == 0:
            challenge_text = (
                f"üéâ –û—Ç–ª–∏—á–Ω–æ! –¢—ã –∑–∞–ø–∏—Å–∞–Ω –≤ —á–µ–ª–ª–µ–Ω–¥–∂: {challenge_info['name']}\n\n"
                f"üìÖ –ù–∞—á–∞–ª–æ: {challenge_info['start_date']}\n"
                f"üí™ –í—Å–µ–≥–æ –¥–Ω–µ–π: {challenge_info['total_days']}\n\n"
                f"–ß–µ–ª–ª–µ–Ω–¥–∂ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª—Å—è! –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å: {challenge_info['start_date']}"
            )
        else:
            challenge_text = (
                f"üéâ –û—Ç–ª–∏—á–Ω–æ! –¢—ã –∑–∞–ø–∏—Å–∞–Ω –≤ —á–µ–ª–ª–µ–Ω–¥–∂: {challenge_info['name']}\n\n"
                f"üìÖ –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å: {user_day}/{challenge_info['total_days']}\n"
                f"üí™ –°–µ–≥–æ–¥–Ω—è –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å: {user_day} {challenge_info['task']}\n\n"
                f"–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –æ—Ç–ø—Ä–∞–≤–ª—è–π –∫—Ä—É–∂–æ—á–µ–∫ (–≤–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ), —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è. "
                f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ 8:00 –∏ 18:00 –ø–æ –ú–°–ö.\n"
                f"–°—á–µ—Ç—á–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00!"
            )
    else:
        challenge_text = "–¢—ã –∑–∞–ø–∏—Å–∞–Ω, –Ω–æ –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞."
    
    await message.answer(
        challenge_text,
        reply_markup=get_back_keyboard() if message.from_user.id in ADMIN_IDS else None
    )

@router.message(F.text == "‚ùå –ù–µ—Ç, –Ω–µ —Å–µ–π—á–∞—Å")
async def decline_participation(message: Message):
    await message.answer(
        "–•–æ—Ä–æ—à–æ, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å - –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ /start —Å–Ω–æ–≤–∞!",
        reply_markup=get_back_keyboard() if message.from_user.id in ADMIN_IDS else None
    )

@router.message(F.video_note)
async def handle_video_note(message: Message):
    user = await db.get_user(message.from_user.id)
    
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ /start")
        return
    
    user_status = user[2]  # status field
    
    if user_status == USER_BLOCKED:
        await message.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.")
        return
    
    today = date.today()
    last_completion = user[3]  # last_completion_date field
    
    if last_completion and last_completion == today.isoformat():
        await message.answer("–í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_day = await db.get_user_current_day(message.from_user.id)
    challenge_info = await db.get_challenge_info()
    
    if user_day == 0:
        await message.answer("–ß–µ–ª–ª–µ–Ω–¥–∂ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª—Å—è!")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
    await db.update_user_completion(message.from_user.id, today)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª
    if challenge_info:
        channel_message = (
            f"üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username or '–±–µ–∑ username'} "
            f"–≤—ã–ø–æ–ª–Ω–∏–ª {user_day}-–π –¥–µ–Ω—å —á–µ–ª–ª–µ–Ω–¥–∂–∞ '{challenge_info['name']}'!\n"
            f"üí™ –°–¥–µ–ª–∞–Ω–æ: {user_day} {challenge_info['task']}"
        )
    else:
        channel_message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username or '–±–µ–∑ username'} –≤—ã–ø–æ–ª–Ω–∏–ª —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π —á–µ–ª–ª–µ–Ω–¥–∂!"
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ—á–µ–∫ –≤ –∫–∞–Ω–∞–ª
        await message.bot.send_video_note(
            CHANNEL_ID, 
            message.video_note.file_id
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        await message.bot.send_message(
            CHANNEL_ID,
            channel_message
        )
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if challenge_info:
            await message.answer(
                f"üéâ –û—Ç–ª–∏—á–Ω–æ! –¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª {user_day}-–π –¥–µ–Ω—å —á–µ–ª–ª–µ–Ω–¥–∂–∞!\n"
                f"üí™ –¢—ã —Å–¥–µ–ª–∞–ª(–∞) {user_day} {challenge_info['task']}!\n"
                f"üìπ –¢–≤–æ–π –∫—Ä—É–∂–æ—á–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª."
            )
        else:
            await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è! üéâ –¢–≤–æ–π –∫—Ä—É–∂–æ—á–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª.")
            
    except Exception as e:
        logging.error(f"Failed to send video note to channel: {e}")
        await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è! üéâ (–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª)")

# –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
@router.message(Command("admin"))
async def cmd_admin(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
        return
    
    await message.answer("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=get_admin_keyboard())

@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_admin(message: Message):
    if message.from_user.id in ADMIN_IDS:
        await message.answer("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=get_admin_keyboard())

@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_action(message: Message, state: FSMContext):
    if message.from_user.id in ADMIN_IDS:
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_admin_keyboard())

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–µ–º
@router.message(F.text == "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–µ–º")
async def manage_challenge(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    challenge_info = await db.get_challenge_info()
    if challenge_info:
        challenge_text = (
            f"–¢–µ–∫—É—â–∏–π —á–µ–ª–ª–µ–Ω–¥–∂:\n"
            f"üèÜ –ù–∞–∑–≤–∞–Ω–∏–µ: {challenge_info['name']}\n"
            f"üí™ –ó–∞–¥–∞–Ω–∏–µ: {challenge_info['task']}\n"
            f"üìÖ –í—Å–µ–≥–æ –¥–Ω–µ–π: {challenge_info['total_days']}\n"
            f"üìÖ –ù–∞—á–∞–ª–æ: {challenge_info['start_date']}\n"
            f"üìÖ –¢–µ–∫—É—â–∏–π –¥–µ–Ω—å: {challenge_info['current_day']}"
        )
    else:
        challenge_text = "–ê–∫—Ç–∏–≤–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    
    await message.answer(challenge_text, reply_markup=get_challenge_keyboard())

@router.callback_query(F.data == "create_challenge")
async def create_challenge_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞:", reply_markup=get_cancel_keyboard())
    await state.set_state(AdminStates.waiting_for_challenge_name)
    await callback.answer()

@router.callback_query(F.data == "update_task")
async def update_task_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —á–µ–ª–ª–µ–Ω–¥–∂–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–æ—Ç–∂–∏–º–∞–Ω–∏–π', '–ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π', '–ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏–π'):", reply_markup=get_cancel_keyboard())
    await state.set_state(AdminStates.waiting_for_update_task)
    await callback.answer()

@router.message(AdminStates.waiting_for_challenge_name)
async def process_challenge_name(message: Message, state: FSMContext):
    await state.update_data(challenge_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —á–µ–ª–ª–µ–Ω–¥–∂–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–æ—Ç–∂–∏–º–∞–Ω–∏–π', '–ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π', '–ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏–π'):", reply_markup=get_cancel_keyboard())
    await state.set_state(AdminStates.waiting_for_challenge_task)

@router.message(AdminStates.waiting_for_challenge_task)
async def process_challenge_task(message: Message, state: FSMContext):
    await state.update_data(challenge_task=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —á–µ–ª–ª–µ–Ω–¥–∂–∞:", reply_markup=get_cancel_keyboard())
    await state.set_state(AdminStates.waiting_for_challenge_days)

@router.message(AdminStates.waiting_for_challenge_days)
async def process_challenge_days(message: Message, state: FSMContext):
    try:
        days = int(message.text)
        if days <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        data = await state.get_data()
        challenge_name = data.get('challenge_name')
        challenge_task = data.get('challenge_task')
        
        await db.set_challenge(challenge_name, challenge_task, days)
        await message.answer(
            f"‚úÖ –ù–æ–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂ —Å–æ–∑–¥–∞–Ω!\n"
            f"üèÜ –ù–∞–∑–≤–∞–Ω–∏–µ: {challenge_name}\n"
            f"üí™ –ó–∞–¥–∞–Ω–∏–µ: {challenge_task}\n"
            f"üìÖ –î–Ω–µ–π: {days}\n"
            f"üìÖ –ù–∞—á–∞–ª–æ: {date.today() + timedelta(days=1)}\n"
            f"üîÑ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞—á–∏–Ω–∞—é—Ç —Å 1 –¥–Ω—è",
            reply_markup=get_admin_keyboard()
        )
        await state.clear()
        
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–Ω–µ–π:")

@router.message(AdminStates.waiting_for_update_task)
async def process_update_task(message: Message, state: FSMContext):
    await db.update_challenge_task(message.text)
    await message.answer(
        f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n"
        f"üí™ –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ: {message.text}",
        reply_markup=get_admin_keyboard()
    )
    await state.clear()

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
@router.message(F.text == "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
async def manage_users(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_management_keyboard())

# Callback —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
@router.callback_query(F.data.startswith("admin_"))
async def admin_management_callback(callback: CallbackQuery, state: FSMContext):
    action = callback.data.split("_")[1]
    
    actions = {
        "block": ("–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏", AdminStates.waiting_for_block_user_id, USER_BLOCKED),
        "activate": ("–∞–∫—Ç–∏–≤–∞—Ü–∏–∏", AdminStates.waiting_for_activate_user_id, USER_ACTIVE)
    }
    
    if action in actions:
        text, state_name, status = actions[action]
        await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è {text}:", reply_markup=get_cancel_keyboard())
        await state.set_state(state_name)
        await state.update_data(action_status=status)
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
@router.message(AdminStates.waiting_for_block_user_id)
@router.message(AdminStates.waiting_for_activate_user_id)
async def process_user_management(message: Message, state: FSMContext):
    try:
        user_id = int(message.text)
        user_data = await state.get_data()
        action_status = user_data.get('action_status', USER_ACTIVE)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await db.get_user(user_id)
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_admin_keyboard())
            await state.clear()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await db.update_user_status(user_id, action_status)
        
        status_names = {
            USER_BLOCKED: "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", 
            USER_ACTIVE: "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (—Å—á–µ—Ç—á–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å–±—Ä–æ—à–µ–Ω)"
        }
        
        await message.answer(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} {status_names[action_status]}.",
            reply_markup=get_admin_keyboard()
        )
        
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.", reply_markup=get_cancel_keyboard())
        return
    
    await state.clear()

# –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.message(F.text == "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def list_users(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    users = await db.get_all_users()
    if not users:
        await message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    users_list = []
    for user in users:
        status_emoji = {
            USER_ACTIVE: "‚úÖ",
            USER_BLOCKED: "üö´"
        }.get(user[2], "‚ùì")
        
        users_list.append(f"{status_emoji} ID: {user[0]}, Username: @{user[1] or '–Ω–µ—Ç'}, –°—Ç–∞—Ç—É—Å: {user[2]}, –î–µ–Ω—å: {user[4]}, –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {user[3]}")
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    message_text = "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n" + "\n".join(users_list)
    if len(message_text) > 4096:
        parts = [message_text[i:i+4096] for i in range(0, len(message_text), 4096)]
        for part in parts:
            await message.answer(part)
    else:
        await message.answer(message_text)

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    users = await db.get_all_users()
    completed_today = await db.get_users_without_today_completion()
    challenge_info = await db.get_challenge_info()
    
    active_users = [u for u in users if u[2] == USER_ACTIVE]
    blocked_users = [u for u in users if u[2] == USER_BLOCKED]
    
    users_with_reminders = [u for u in users if u[3] > 0]  # users with reminder_count > 0
    
    stats_text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n"
        f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_users)}\n"
        f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {len(blocked_users)}\n"
        f"üìÖ –í—ã–ø–æ–ª–Ω–∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è: {len(active_users) - len(completed_today)}\n"
        f"‚è∞ –ù–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è: {len(completed_today)}\n"
        f"üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏: {len(users_with_reminders)}"
    )
    
    if challenge_info:
        stats_text += f"\n\nüèÜ –¢–µ–∫—É—â–∏–π —á–µ–ª–ª–µ–Ω–¥–∂: {challenge_info['name']}\n"
        stats_text += f"üí™ –ó–∞–¥–∞–Ω–∏–µ: {challenge_info['task']}\n"
        stats_text += f"üìÖ –í—Å–µ–≥–æ –¥–Ω–µ–π: {challenge_info['total_days']}\n"
        stats_text += f"üìÖ –ù–∞—á–∞–ª–æ: {challenge_info['start_date']}\n"
        stats_text += f"üìÖ –¢–µ–∫—É—â–∏–π –¥–µ–Ω—å: {challenge_info['current_day']}"
    
    await message.answer(stats_text)
